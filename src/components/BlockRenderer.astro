---
import BlockRendererInner from "./BlockRenderer.astro";
import NavigationSubLink from "./NavigationSubLink.astro";
import Navigation from "./Navigation.astro";
import NavigationLink from "./NavigationLink.astro";
import NavigationSubmenu from "./NavigationSubmenu.astro";
import Button from "./Button.astro";
import Heading from "./Heading.astro";
import Cover from "./Cover.astro";
import PostRenderer from "./PostRenderer.astro";
import { getBlockStyling } from "@wp-block-tools/styles";
import type { Block } from "@wp-block-tools/styles";
import { Image } from "astro:assets";
import { dataPosts } from "../pages/[...slug].astro";
type Props = {
  blocks: Block[];
};

const { blocks } = Astro.props;
---

{
  blocks.map((block) => {
    const { styles, classes } = getBlockStyling(block);

    switch (block.name) {
      case "core/image":
        return (
          <Image
            src={block.attributes?.url}
            height={block.attributes?.height}
            width={block.attributes?.width}
            class={classes}
            style={styles}
            alt={block.attributes?.alt || ""}
          />
        );
      case "core/button":
        return (
          <Button
            classes={classes}
            styles={styles}
            url={block.attributes?.url}
            content={block.attributes?.content || ""}
          />
        );
      case "core/post-title":
      case "core/heading":
        return (
          <Heading
            level={block.attributes?.level || 2}
            classes={classes}
            styles={styles}
            content={block.attributes?.content || ""}
          />
        );
      case "core/cover":
        return (
          <Cover
            classes={classes}
            styles={styles}
            url={block.attributes?.url}
            height={block.attributes?.height}
            width={block.attributes?.width}
            dimRatio={block.attributes?.dimRatio}
            overlayColor={block.attributes?.overlayColor}
            customOverlayColor={block.attributes?.customOverlayColor}
            minHeight={block.attributes?.minHeight}
            minHeightUnit={block.attributes?.minHeightUnit}
          >
            <BlockRendererInner blocks={block.innerBlocks || []} />
          </Cover>
        );
      case "core/navigation-submenu":
        return (
          <NavigationSubmenu
            classes={classes}
            styles={styles}
            label={block.attributes?.label || ""}
            url={block.attributes?.url || ""}
          >
            {block.innerBlocks?.map((link) => (
              <NavigationSubLink
                classes={classes}
                styles={styles}
                label={link.attributes?.label || ""}
                url={link.attributes?.url || ""}
              />
            ))}
          </NavigationSubmenu>
        );
      case "core/navigation-link":
        return (
          <NavigationLink
            classes={classes}
            styles={styles}
            label={block.attributes?.label || ""}
            url={block.attributes?.url || ""}
          />
        );
      case "core/navigation":
        return (
          <Navigation classes={classes} styles={styles}>
            <BlockRendererInner blocks={block.innerBlocks || []} />
          </Navigation>
        );
      case "core/paragraph":
        return (
          <p
            class={classes}
            style={styles}
            set:html={block.attributes?.content}
          />
        );
      case "core/columns":
      case "core/column":
      case "core/post-content":
      case "core/group":
      case "core/buttons":
        return (
          <div style={styles} class={classes}>
            <BlockRendererInner blocks={block.innerBlocks || []} />
          </div>
        );
      case "core/site-logo":
        return (
          <div style={styles} class={classes}>
            <a href="/" title="Vers l'accueil">
              <Image
                height={block.attributes?.height || 50}
                width={block.attributes?.width || 50}
                src={block.attributes?.url || ""}
                alt=""
              />
            </a>
          </div>
        );
      case "core/template-part":
        return <BlockRendererInner blocks={block.innerBlocks || []} />;
      case "core/latest-posts":
        return <PostRenderer dataPosts={dataPosts} />;
      default:
        return null;
    }
  })
}
