---
import { truncateText } from "../utils/truncateText";
import { formatDate } from "../utils/formatDate";
const response = await fetch(`${Astro.url.origin}/api/articles.json`);
const { posts } = await response.json();
interface Props {
  postsToShow?: number;
  displayPostContent?: boolean;
  excerptLength?: number;
  displayPostDate?: boolean;
  postLayout?: "grid" | "list"; // Exemple de typage pour postLayout
  displayFeaturedImage?: boolean;
  featuredImageAlign?: string; // 'center', 'left', 'right', etc.
  featuredImageSizeSlug?: string; // 'large', 'medium', etc.
  addLinkToFeaturedImage?: boolean;
  align?: string; // 'wide', 'full', etc.
  // Vous pouvez également inclure des styles si nécessaire
  textColor?: string;
}

const {
  postsToShow,
  displayPostContent,
  excerptLength,
  displayPostDate,
  postLayout,
  displayFeaturedImage,
  featuredImageAlign,
  featuredImageSizeSlug,
  textColor,
} = Astro.props;
const imageSize = (imageSize: string) => {
  switch (imageSize) {
    case "large":
      let imageLargeClass = "w-[1024px] h-[1024px]";
      return imageLargeClass;
    case "medium":
      let imageMediumClass = "w-[300px] h-[300px]";
      return imageMediumClass;
    case "":
      let imageSmallClass = "w-[150px] h-[150px]";
      return imageSmallClass;
    default:
      null;
  }
};
const articleUrl = (uri: string) => `${Astro.url.origin}${uri}`;
---

<div
  class={`${postLayout} sm:flex justify-${featuredImageAlign} text-${textColor} mx-auto sm:w-8/12 justify-between pb-40`}
>
  {
    posts.slice(0, postsToShow).map((post: any) => (
      <a href={articleUrl(post.uri)}>
        <article class={imageSize(featuredImageSizeSlug || "")}>
          {displayFeaturedImage && post.featuredImage && (
            <img
              src={post.featuredImage.node.sourceUrl}
              alt={post.featuredImage.node.altText}
              class="object-cover h-full w-full"
            />
          )}
          <div class="text-center">
            <h2 transition:name={`post-title-${post.databaseId}`}>
              {post.title}
            </h2>
            {displayPostDate && <p>{formatDate(post.date)}</p>}
            {displayPostContent && (
              <div set:html={truncateText(post.excerpt, excerptLength || 30)} />
            )}
          </div>
        </article>
      </a>
    ))
  }
</div>
